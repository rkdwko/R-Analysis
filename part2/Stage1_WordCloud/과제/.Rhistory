plot(versicolor$Sepal.Length, versicolor$Sepal.Width,main="versicolor Sepal",xlab='length',ylab='width',col='green')
plot(versicolor$Petal.Length, versicolor$Petal.Width,main="versicolor Petal",xlab='length',ylab='width',col='violet')
plot(virginica$Sepal.Length, virginica$Sepal.Width,main="virginica Sepal",xlab='length',ylab='width',col='orange')
plot(virginica$Petal.Length, virginica$Sepal.Width,main="virginica Petal",xlab='length',ylab='width',col='gray')
# 2 품종별 평균치로 barplot 비교하기
x <- 1:5
barplot(x)
barplot(x, horiz=T)
x <- matrix(c(5,4,3,2), nrow=2)
x
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"), horiz = T)
par(oma=c(1, 0.5, 1, 0.5))
barplot(x, names=c(5,3), col=c("green","yellow"), horiz = T, xlim = c(0,12))
# 2 품종별 평균치로 barplot 비교하기
x <- 1:5
barplot(x)
barplot(x, horiz=T)
x <- matrix(c(5,4,3,2), nrow=2)
x
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"), horiz = T)
par(oma=c(1, 0.5, 1, 0.5))
barplot(x)
barplot(x, horiz=T)
x <- matrix(c(5,4,3,2), nrow=2)
x
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
par(oma=c(1, 0.5, 1, 0.5))
barplot(x, names=c(5,3), col=c("green","yellow"), horiz = T, xlim = c(0,12))
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1, 2))
x <- 1:5
barplot(x)
barplot(x, horiz=T)
x <- matrix(c(5,4,3,2), nrow=2)
x
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1, 1))
x <- 1:5
barplot(x)
barplot(x, horiz=T)
x <- matrix(c(5,4,3,2), nrow=2)
x
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"), horiz = T)
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1, 0.5, 1, 0.5))
x <- 1:5
barplot(x)
barplot(x, horiz=T)
x <- matrix(c(5,4,3,2), nrow=2)
x
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"), horiz = T)
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1, 0.5, 1, 0.5))
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"), horiz = T)
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1, 15, 1, 1))
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"), horiz = T)
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1, 1, 1, 1))
barplot(x, beside=T)
barplot(x, beside=T, names=c(5,3))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"))
barplot(x, beside=T, names=c(5,3), col=c("green","yellow"), horiz = T)
x <- matrix(c(5,4,3,2),2,2)
x
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1, 1, 1, 1))
x <- matrix(c(5,4,3,2),2,2)
x
barplot(x,beside=T,names=c(5,4), col=c("green","yellow"))
x
# 2 품종별 평균치로 barplot 비교하기
par(oma=c(1,1))
# 2 품종별 평균치로 barplot 비교하기
par=(c(1,1))
x <- matrix(c(5,4,3,2),2,2)
barplot(x,beside=T,names=c(5,4), col=c("green","yellow"))
x
# 2 품종별 평균치로 barplot 비교하기
pa=(mfrow=c(1,1))
x <- matrix(c(5,4,3,2),2,2)
barplot(x,beside=T,names=c(5,4), col=c("green","yellow"))
x
# 2 품종별 평균치로 barplot 비교하기
par=(mfrow=c(1,1))
x <- matrix(c(5,4,3,2),2,2)
barplot(x,beside=T,names=c(5,4), col=c("green","yellow"))
x
# 2 품종별 평균치로 barplot 비교하기
par=(mfrow=(1,1))
# 2 품종별 평균치로 barplot 비교하기
par=(mfrow=c(1,1))
x <- matrix(c(5,4,3,2),2,2)
barplot(x,beside=T,names=c(setosa), col=c("green","yellow"))
barplot(x,beside=T,names=c(versicolor), col=c("red","blue"))
barplot(x,beside=T,names=c(virginica), col=c("grey","violet"))
# 2 품종별 평균치로 barplot 비교하기
par=(mfrow=c(1,1,1,1))
x <- matrix(c(5,4,3,2),2,2)
barplot(x,beside=T,names=c(setosa), col=c("green","yellow"))
barplot(x,beside=T,names=c(versicolor), col=c("red","blue"))
barplot(x,beside=T,names=c(virginica), col=c("grey","violet"))
barplot(x,beside=T,names=(setosa), col=c("green","yellow"))
barplot(x,beside=T,names=(versicolor), col=c("red","blue"))
barplot(x,beside=T,names=(virginica), col=c("grey","violet"))
barplot(x,beside=T,names=c(setosa,versicolor), col=c("green","yellow"))
iris
View(iris)
# 1 품종별 6가지 산점도
attach(iris)
iris.split <- split(iris,Species)
iris.split
setosa = iris.split$setosa
versicolor = iris.split$versicolor
virginica = iris.split$virginica
par(mfrow=c(3,2))
plot(setosa$Sepal.Length, setosa$Sepal.Width,main="setosa Sepal",xlab='length',ylab='width',col='red')
plot(setosa$Petal.Length, setosa$Petal.Width,main="setosa Petal",xlab='length',ylab='width',col='blue')
plot(versicolor$Sepal.Length, versicolor$Sepal.Width,main="versicolor Sepal",xlab='length',ylab='width',col='green')
plot(versicolor$Petal.Length, versicolor$Petal.Width,main="versicolor Petal",xlab='length',ylab='width',col='violet')
plot(virginica$Sepal.Length, virginica$Sepal.Width,main="virginica Sepal",xlab='length',ylab='width',col='orange')
plot(virginica$Petal.Length, virginica$Sepal.Width,main="virginica Petal",xlab='length',ylab='width',col='gray')
install.packages("ggplot2")
library(ggplot2)
korean <- read.table("학생별국어성적_new.txt",header=T,sep=",")
korean <- read.table("data/학생별국어성적_new.txt",header=T,sep=",")
ggplot(korean,aes(x=이름,y=점수)) + geom_point()
geom_point()
ggplot(korean,aes(x=이름,y=점수)) + geom_point() +
geom_point()
ggplot(mapping,aes(x=이름,y=점수), data=korean) +
geom_point()
ggplot(korean,aes(x=이름,y=점수)) + geom_point() + geom_point()
ggplot(mapping,aes(x=이름,y=점수), data=korean) + geom_point()
ggplot(korean, aes(x=이름, y=점수)) + geom_bar(stat="identity")
ggplot(korean, aes(x=이름, y=점수)) + geom_bar(stat="identity",fill="green",colour="red")
ggplot(korean, aes(x=이름, y=점수)) + geom_bar(stat="identity",fill="green",colour="red") +
theme(axis.text.x=element_text(angle=45,hjust=1,vjust=1,color="blue",size=8))
score_kem <- read.csv("data/학생별과목별성적_new.csv",header=T)
score_kem <- read.csv("학생별과목별성적_new.csv",header=T)
score_kem <- read.csv("data/학생별과목별성적_new.csv",header=T)
score_kem <- read.csv("data/학생별과목별성적_국영수_new.csv",header=T)
score_kem
library(dplyr)
sort_kem <- arrange(score_kem,이름,과목)
sort_kem
sort_kem2 <- ddply(sort_kem,"이름",transform,누적합계=cumsum(점수))
sort_kem2 <- ddply(sort_kem,"이름",transform,누적합계=cumsum(점수))
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
sort_kem <- arrange(score_kem,이름,과목)
sort_kem
sort_kem2 <- ddply(sort_kem,"이름",transform,누적합계=cumsum(점수))
sort_kem2 <- sort_kem %>%
group_by(이름) %>%
mutate(누적합계=cumsum(점수))
sort_kem2
sort_kem3 <- sort_kem2 %>%
group_by(이름) %>%
mutate(label=cumsum(점수)-0.5*점수)
sort_kem3
sort_kem4 <- sort_kem %>%
group_by(이름) %>%
mnutate(누적합계=cumsum(점수)) %>%
mutate(label=cumsum(점수)-0.5*점수)
sort_kem4 <- sort_kem %>%
group_by(이름) %>%
mutate(누적합계=cumsum(점수)) %>%
mutate(label=cumsum(점수)-0.5*점수)
sort_kem4
sort_kem5 <- sort_kem %>%
group_by(이름) %>%
mutate(누적합계=cumsum(점수), label=cumsum(점수)-0.5*점수)
sort_kem5
ggplot(sort_kem3,aes(x=이름,y=점수,fill=과목)) +
geom_bar(stat="identity") +
geom_text(aes(y=label,label=paste(점수,'점')),colour="black",size=4)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(sort_kem3,aes(x=이름,y=점수,fill=과목)) +
geom_bar(stat="identity") +
geom_text(aes(y=label,label=paste(점수,'점')),colour="black",size=4)
ggplot(sort_kem3,aes(x=이름,y=점수,fill=과목)) +
geom_bar(stat="identity") +
geom_text(aes(y=label,label=paste(점수,'점')),colour="black",size=4) +
guides(fill=guide_legend(reverse=T))
ggplot + theme(axis.text.x=element_text(angle=45.hjust=1,vjust=1,colour="black",size=8))
theme(axis.text.x=element_text(angle=45.hjust=1,vjust=1,colour="black",size=8))
ggplot(sort_kem3,aes(x=이름,y=점수,fill=과목)) +
geom_bar(stat="identity") +
geom_text(aes(y=label,label=paste(점수,'점')),colour="black",size=4) +
guides(fill=guide_legend(reverse=T)) +
theme(axis.text.x=element_text(angle=45.hjust=1,vjust=1,colour="black",size=8))
ggplot(sort_kem3,aes(x=이름,y=점수,fill=과목)) +
geom_bar(stat="identity") +
geom_text(aes(y=label,label=paste(점수,'점')),colour="black",size=4) +
guides(fill=guide_legend(reverse=T)) +
theme(axis.text.x=element_text_angle=45.hjust=1,vjust=1,colour="black",size=8))
ggplot(sort_kem3,aes(x=이름,y=점수,fill=과목)) +
geom_bar(stat="identity") +
geom_text(aes(y=label,label=paste(점수,'점')),colour="black",size=4) +
guides(fill=guide_legend(reverse=T)) +
theme(axis.text.x=element_text(angle=45,hjust=1,vjust=1,colour="black",size=8))
score <- read.table("학생별전체성적_new.txt",header=T,sep=",")
score <- read.table("data/학생별전체성적_new.txt",header=T,sep=",")
score
score[,c("이름","영어")]
ggplot(score,aes(x=영어,y=reorder(이름,영어))) +
geom_point(size=6) +
theme_bw() +
theme(panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_line(color="red",linetype="dashed"))
ggplot(score,aes(x=영어,y=reorder(이름,영어))) +
geom_segment(aes(yend=이름),xend=0,color="blue") +
geom_point(size=6,color="green") +
theme_bw() +
theme(panel.grid.major.y=element_blank())
library(gridExtra)
install.packages("gridExtar")
library(gridExtra)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
mtcars
str(mtcars)
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point()
ggplot(mtcars, aes(x=hp , y=disp)) +
geom_point()
ggplot(mtcars, aes(x=hp , y=disp)) +
geom_point(colour='blue')
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(aes(color=factor(am)))
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(aes(color=factor(am), size=5))
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(aes(color=factor(am), size=wt))
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(aes(shape=factor(am), size=wt))
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(aes(shape=factor(am), color=wt))
# 종류별로 크기, 모양, 색상 지정하기
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(aes(shape=factor(am), size = wt))+
scale_color_manual(values=c("red","green"))
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(color='red') +
geom_line(colour='blue')
ggplot(mtcars, aes(x=hp , y=mpg)) +
geom_point(aes(shape=factor(am), color=factor(am), size = wt)) +
scale_color_manual(values=c("red","green")) +
labs(x="마력", y="연비(mile/gallon)")
three <- read.csv("data/학생별과목별성적_3기_3명.csv",header=T)
three
sort_score <- arrange(three,이름,과목)
install.packages(dplyr)
sort_score <- arrange(three,이름,과목)
install.packages(dplyr)
install.packages(dplyr)
library(dplyr)
three <- read.csv("data/학생별과목별성적_3기_3명.csv",header=T)
three
sort_score <- arrange(three,이름,과목)
sort_score
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line()
install.packages("ggplot2")
library(ggplot2)
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line()
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line() +
geom_point()
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line() +
geom_point(size=6,shape=22)
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +
geom_line() +
geom_point(size=6,shape=22)
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +
geom_line() +
geom_point(size=6,shape=22) +
ggtitle("학생별 과목별 성적")
dis <- read.csv("1군전염병발병현황_년도별.csv",stringsAsFactors=F)
dis <- read.csv("data/1군전염병발병현황_년도별.csv",stringsAsFactors=F)
dis
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_line()
ggplot(dis,aes(x=년도별,y=group=1)) +
geom_area()
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_area()
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line() +
geom_point()
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_area()
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line() +
geom_point()
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_area(fill="cyan",alpha=0.4) +
geom_line()
anscombe
str(anscombe)
ans_x_mean <- anscombe %>%
select(x1,x2,x3,x4) %>%
summarise_each(list(mean), x1, x2, x3, x4)
ans_x_mean
ans_y_mean <- anscombe %>%
select(y1,y2,y3,y4) %>%
summarise_each(list(mean), y1, y2, y3, y4)
ans_y_mean
ans_x_var <- anscombe %>%
select(x1,x2,x3,x4) %>%
summarise_each(list(var), x1, x2, x3, x4)
ans_x_var
ans_y_var <- anscombe %>%
select(y1,y2,y3,y4) %>%
summarise_each(list(var), y1, y2, y3, y4)
ans_y_var
p1 <- ggplot(anscombe) +
geom_point(aes(x1, y1), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
expand_limits(x = 0, y = 0) +
labs(title = "dataset 1")
p1
p2 <- ggplot(anscombe) +
geom_point(aes(x2, y2), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
expand_limits(x = 0, y = 0) +
labs(title = "dataset 2")
p2
p3 <- ggplot(anscombe) +
geom_point(aes(x3, y3), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
expand_limits(x = 0, y = 0) +
labs(title = "dataset 3")
p3
p4 <- ggplot(anscombe) +
geom_point(aes(x4, y4), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
expand_limits(x = 0, y = 0) +
labs(title = "dataset 4")
p4
p4 <- ggplot(anscombe) +
geom_point(aes(x4, y4), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_y_continuous(breaks = seq(2, 14, 2)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
expand_limits(x = 0, y = 0) +
labs(title = "dataset 4")
p4
p4 <- ggplot(anscombe) +
geom_point(aes(x4, y4), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
expand_limits(x = 0, y = 0) +
labs(title = "dataset 4")
p4
grid.arrange(p1,p2,p3,p4, ncol=2, top = 'Anscombe`s Quartet)
grid.arrange(p1,p2,p3,p4, ncol=2, top = 'Anscombe`s Quartet')
grid.arrange(p1,p2,p3,p4, ncol=2, top = "Anscombe`s Quartet")
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1,p2,p3,p4, ncol=2, top = "Anscombe`s Quartet")
install.packages("ppglot2")
library(ggplot2)
mpg
View(mpg)
var1 <- 1:5
plot(var1)
var1 <- 5:1
plot(var1)
var2 <- c(2,2,2)
plot(var2)
x <- 1:3
y <- 4:2
plot(x, y)
plot(x, y, xlim = c(0, 5), ylim = c(0, 5))
plot(x, y, xlim = c(0, 5), ylim = c(0, 5), xlab = "X축값", ylab = "Y축값", main = "Plot Test")
var1 <- 1:5
plot(var1)
var2 <- c(2,2,2)
plot(var2)
x <- cty
y <- hwy
plot(x, y)
x <- 1:3
y <- 4:2
plot(x, y)
plot(x, y, xlim = c(0, 5), ylim = c(0, 5))
plot(x, y, xlim = c(0, 5), ylim = c(0, 5), xlab = "cty", ylab = "hwy", main = "cty와 hwy의 관계")
var1 <- 1:5
plot(var1)
var2 <- c(2,2,2)
plot(var2)
x <- 1:3
y <- 4:2
plot(x, y)
plot(x, y, xlim = c(0, 5), ylim = c(0, 5))
plot(x, y, xlim = c(0, 5), ylim = c(0, 5), xlab = "cty", ylab = "hwy", main = "cty와 hwy의 관계")
#1. mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다.
#   x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.
install.packages("ppglot2")
library(ggplot2)
mpg
View(mpg)
```{r setup, include=FALSE}
df_suv <- mpg %>%
filter(class == 'suv') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty, fill=manufacturer)) +
geom_col()
#4
ggplot(mpg, aes(x=class, fill=class)) +
geom_bar()
#5
ggplot(economics, aes(x = date, y = psavert)) +
geom_line()
#6
df_3class <- mpg %>%
filter(class %in% c("compact", "subcompact", "suv"))
ggplot(df_3class, aes(x=class, y=cty, fill=class)) +
geom_boxplot()
#7
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
#7-2
df_cut <- diamonds %>%
group_by(cut) %>%
summarise(mean_price = mean(price))
ggplot(df_cut, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages('rJava')
library(rJava)
install.packages('KoNLP')
library(KoNLP)
library(wordcloud)
useSejongDic()
data1 <- readLines("remake.txt")
install.packages("KoNLP")
install.packages("wordcloud")
library(KoNLP)
library(wordcloud)
useSejongDic()
data1 <- readLines("remake.txt")
setwd('D:/Workspace/R_Data_Analysis/part2/stage1_WordCloud/과제')
install.packages('KoNLP')
install.packages('wordcloud')
library(KoNLP)
library(wordcloud)
useSejongDic()
library(stringr)
mergeUserDic(data.frame(readLines('응답소_2015_01.txt'), 'ncn'))
txt <- readLines("응답소_2015_01.txt")
txt
place <- sapply(txt,extractNoun,USE.NAMES=F)
