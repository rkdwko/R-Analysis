sales[,c(1,2,4,3)]    # 열의 출력 순서 조정
install.packages("sqldf")
write.csv(Fruits, "Fruits_sql.csv", quote=F, row.names=F)
write.csv(Fruits, "Fruits_sql.csv", quote=F, row.names=F)
install.packages("XLConnect")
library(XLConncet)
vec1 <- c(1:5)
# Function
?subset()
# Function
?subset()
vec1 <- c(1:5)
vec2 <- c('a', 'b', 'c', 'd', 'e')
max(vec1)
max(vec2)
mean(vec1)
mean(vec2)
min(vec1)
sd(vec1)
sum(vec1)
var(vec1)
library(googleVis)
install.packages("package name")
library(googleVis)
install.packages("TSA")
library(googleVis)
install.packages("googleVis")
library(googleVis)
Fruits
aggregate(Sales-Year, Fruits, sum)
aggregate(Sales~Year, Fruits, sum)
aggregate(Sales~Year, Fruits, max)
aggregate(Sales~Year, Fruits, mean)
aggregate(Sales~Fruit, Fruits, sum)
aggregate(Sales~Fruit, Fruits, max)
apply(mat1,1,sum)
mat1 <- matrix(c(1:6), nrow = 2, byrow = T); mat1
apply(mat1, 1, sum)    # 1 - 행 단위 계산
apply(mat1, 2, sum)    # 2 - 열 단위 계산
apply(mat1, 1, prod)
apply(mat1[,c(2,3)], 1, sum)
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$Profit); list2
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
Fruits
tapply(Sales,Fruit,sum)
attach(Fruits)
tapply(Sales, Fruit, sum)
tapply(Sales, Year, sum)
vec1 <- c(1:5)
vec2 <- seq10,50,10)
vec2 <- seq(10,50,10)
vec3 <- seq(100, 500, 100)
mapply(sum, vec1, vec2, vec3)
data1
read.csv(data1, header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "", ...)
dat <- read.csv(D:\Workspace\R_Data_Analysis\Part3\data_data1.csv",header=T)
dat1 <- read.csv(D:\Workspace\R_Data_Analysis\Part3\data_data1.csv",header=T)
data1 <- read.csv(D:\Workspace\R_Data_Analysis\Part3\data_data1.csv",header=T)
getwd(data1)
> data1 <- read.csv('data1.csv')
data1 <- read.csv('data1.csv')
> data1 <- read.csv('data1.csv')
> data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
data1 <- read.csv("data1.csv")
data1
source('~/.active-rstudio-document', encoding = 'UTF-8')
data2 <- read.csv("1-4호선승하차승객수.csv")
data2
# Function
mat1 <- matrix(c(1:6), nrow = 2, byro = T)
a <- rep(1, 3)
sweep(mat1, 2, a)
b <- matrix(c(2, 2))
sweep(mat1, 1, b)
b
a <- c(1,2,3,4,5); length(a)
length(mat1)
library(googleVis)
length(Fruits)
log(10_)
log(10)
log10(10)
sin(pi)
abs(-1)
v2 <- c(1,-2,3,-4)
abs(v2)
ceiling(2.3)
floor(2.3)
ceiling(-2.3)
floor(-2.3)
round(2.5)
round(2.51)
?round()
choose(5, 3)
myfunc <- function() {
return(10)
}
myfunc()
myfunc2 <- function(x) {
y = x * x;
return(y)
}
myfun2(-3_)
myfun2(-3)
myfunc2(-3)
exfunc1 <- function(a, b) {
result <- a - b
return(result)
exfunc1 <- function(a, b) {
result <- a - b
return(result)
}
exfunc1(3, 5)
exfunc1(56, 34)
exfunc2 <- function(a, b) {
result <- abs(exfunc1(a,b))
return(result)
}
exfunc2(123, 456)
exfunc2 <- function(a, b) {
result <- abs(exfunc1(a, b))
return(result)
}
exfunc2(123, 456)
