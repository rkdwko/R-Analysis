mpg %>%
select(displ, hwy) %>%
filter(displ <= 4 & displ > 5) %>%
arrange(desc(displ), desc(hwy))
# dplyr 연습문제
mpg %>%
select(displ, hwy) %>%
filter(displ <= 4 & displ >= 5) %>%
arrange(desc(displ), desc(hwy))
# dplyr 연습문제
mpg %>%
select(displ, hwy) %>%
filter(displ <= 4 & displ >= 5)
arrange(desc(displ), desc(hwy))
arrange(desc(displ), desc(hwy))
# dplyr 연습문제
mpg %>%
select(displ, hwy) %>%
filter(displ <= 4 & displ >= 5) %>%
arrange(desc(displ), desc(hwy))
# dplyr 연습문제
mpg %>%
select(displ, hwy) %>%
filter(displ <= 4 & displ >= 5) %>%
summarise_each(funs(mean), displ, hwy)
# dplyr 연습문제
mpg %>%
select(displ, hwy) %>%
filter(displ <= 4 | displ >= 5) %>%
summarise_each(funs(mean), displ, hwy)
# dplyr 연습문제
mpg %>%
select(displ, hwy) %>%
filter(displ <= 4 | displ >= 5) %>%
arrange(desc(displ), desc(hwy))
mpg %>%
select(manufacturer) %>%
filter(audi & toyota) %>%
arrange(desc(cty))
mpg %>%
select(audi, tayotar) %>%
filter(manufacturer) %>%
arrange(desc(cty))
mpg %>%
select(manufacturer, cty) %>%
filter(audi & toyota) %>%
arrange(desc(cty))
mpg %>%
group_by(manufacturer) %>%
summarise_each(funs(mean),audi,toyota)
mpg %>%
select(manufacturer) %>%
filter(audi, toyota) %>%
arrange(desc(cty))
mpg4$hwy
mpg4 <- filter(mpg, displ <=4)
mpg4$hwy
mean(mpg$hwy)
select(displ, hwy) %>%
filter(displ <= 4 displ >= 5) %>%
mpg5 <- filter(mpg, displ >5)
select(displ, hwy) %>%
filter(displ <= 4 displ >= 5) %>%
mpg5 <- filter(mpg, displ >= 5)
mean(mpg$hwy)
mpg6 <- filter(mpg, audi)
mpg6 <- filter(mpg, manufacturer =='audi' | manufacturer =='toyota')
mean(mpg$cty)
mpg6 <- filter(mpg, manufacturer =='audi')
mean(mpg$cty)
mpg6 <- filter(mpg, manufacturer =='toyota')
mean(mpg$cty)
mpg7 <- filter(mpg, manufacturer =='toyota')
mean(mpg$cty)
mean(mpg4$hwy)
mean(mpg5$hwy)
mean(mpg6$cty)
mean(mpg7$cty)
#3
mpg %>%
filter(manufacturer %in% c('chevrolet','ford','honda')) %>%
summarise(average = mean(hwy))
#4
mpg_4 <- select(mpg, class, cty)
head(mpg_4); tail(mpg_4)
mpg_4 %>%
filter(class %in% c('suv','compact')) %>%
group_by(class) %>%
summarise(average = mean(cty))
mpg %>%
filter(manufacturer == 'audi') %>%
select(manufacturer, model, hwy) %>%
arrange(desc(hwy)) %>%
head(5)
mpg_new <- mpg %>%
mutate(cty_hwy = cty + hwy)
mpg_new <- mpg_new %>%
mutate(ch_avg = cty_hwy /2)
mpg_new %>%
arrange(desc(ch_avg)) %>%
head(3)
group_by(class) %>%
summarise(average = mean(cty))
#9
mpg %>%
group_by(class) %>%
summarise(average = mean(cty)) %>%
arrange(desc(average))
mpg %>%
group_by(manufacturer) %>%
summarise(average = mean(hwy)) %>%
arrange(desc(average)) %>%
head(3)
library(reshape2)
fruits
melt(fruits, id='year')
melt(fruits, id=c('year','name'))
melt(fruits, id=c('year','name'), variable.name='변수명',
value.nave ='변수값')
melt(fruits, id=c('year','name'), variable.name='변수명',
value.name ='변수값')
mtest <- melt(fruits, id=c('year','name'), variable.name='변수명',
value.name ='변수값')
dcast(mtest,year+name~var_name)
dcast(mtest, year+name~var_변수명)
dcast(mtest, year+name~var~변수명)
dcast(mtest, year+name~변수명)
dcast(mtest, name~변수명, sum)
dcast(mtest, name~변수명, sum, subset=.(변수명=='apple'))
dcast(mtest, name~변수명, sum, subset=.(name=='apple'))
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
library(stringr)
fruits <- c('apple','Apple','banana','pineapple')
fruits <- c('apple','Apple','banana','pineapple')
str_detect(fruits, 'A')
str_detect(fruits, 'a')
str_detect(fruits, '^a')
str_detect(fruits, 'e$')
str_detect(fruits, '^[aA]')
str_detect(fruits, '[aA]')
str_detect(fruits, ignore._ase('a'))
str_detect(fruits, regex('a'.ignore._case = T))
str_detect(fruits, regex('a', ignore._case = T))
str_count(fruits, 'a')
str_c("apple","banana")
str_c("Fruits: ","Fruits")
str_c("Fruits, collapse="")
str_c("Fruits, " name is "., fruits)
str_c("Fruits, " name is ", fruits)
str_c("fruits," name is ", fruits)
str_c("fruits," name is ",fruits)
str_c(fruits," name is ",fruits)
str_c(fruits,collapse="")
str_c(fruits,collapse="-")
str_dup(fruits,3)
str_length('apple')
str_length(fruits)
str_locate('apple','a')
str_locate(furits,'a')
str_locate(fruits,'a')
str_locate(apple,'app')
str_locate('apple','app')
str_replace('apple','p''8')
str_replace('apple','p''*')
str_replace('apple','p','*')
str_replace('apple','p','**')
str_replace_all('apple','p','*')
fruits <- str_c('apple','/','orange','/','banana')
fruits
str_split(fruits,"/")
str_sub(fruits,start=1,end=3)
str-sub(fruits,start=-5)
str_sub(fruits,start=-5)
str_trim('  apple banana berry  ')
str_trim('\t  apple banana berry  ')
str_trim('  apple banana berry  \n  apple banana berry  ')
str_trim('  apple banana berry  \n)
library(googleVis)
Fruits
library(dplyr)
library(dplyr)
f2 <- filter(Fruits, Expenses>80)
f2
Fruits %>%
group_by(Fruit) %>%
mutate(sumSales = sum(Sales))
library(ggqlot2)
library(ggplot2)
library(ppglot2)
library(ggplot2)
View(mpg)
library(dplyr)
mpg %>%
filter(manufacturer %in% c('audi', 'toyota'))
mpg %>%
filter(manufacturer %in% c('audi', 'toyota')) %>%
group_by(manufacturer) %>%
summarise(고속도로연비평균=mean(hwy))
summarise(고속도로연비평균=mean(hwy))
mpg %>%
filter(manufacturer %>% c('audi','toyota')) %>%
group_by(manufacturer) %>%
summarise(고속도로연비평균=mean(hwy))
mpg %>%
filter(manufacturer %in% c('audi','toyota')) %>%
group_by(manufacturer) %>%
summarise(고속도로연비평균=mean(hwy))
mpg %>%
filter(manufacturer %in% c('chevorlet','ford','honda'))%>%
group_by(manufacturer) %>%
summarise(고속도로연비평균=mean(hwy))
mpg %>%
filter(manufacturer %in% c('chevrolet','ford','honda'))%>%
group_by(manufacturer) %>%
summarise(고속도로연비평균=mean(hwy))
mpg %>%
filter(manufacturer %in% c('chevrolet','ford','honda'))%>%
group_by(manufacturer) %>%
summarise(average=mean(hwy))
summarise(cty_avg = mean(cty)
summarise(cty_avg = mean(cty)
mpg %>%
filter(manufacturer %in% c('chevrolet','ford','honda')) %>%
group_by(manufacturer) %>%
summarise(cty_avg = mean(cty))
mpg %>%
filter(drv) %>%
summarise(drv_avg = mean(dry))
mpg %>%
filter(drv) %>%
summarise(average = mean(dry))
mpg %>%
filter(drv %in% c('f','r','4')) %>%
group_by(drv) %>%
summarise((cty+hwy)/2)
mpg %>%
filter(drv %in% c('f','r','4')) %>%
group_by(drv) %>%
summarise(hwy_avg = mean(hwy))
mpg %>%
filter(cyl %in% c('2','4','6','8')) %>%
group_by(cyl) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy))
mpg %>%
filter(cyl %in% c('2','4','6','8')) %>%
group_by(cyl) %>%
summarise(hwy_avg = mean(hwy))
arrange(desc(hwy))
mpg %>%
filter(cyl %in% c('2','4','6','8')) %>%
group_by(cyl) %>%
summarise(hwy_avg = mean(hwy)) %<%
arrange(desc(hwy_avg))
mpg %>%
filter(cyl %in% c('2','4','6','8')) %>%
group_by(cyl) %>%
summarise(hwy_avg = mean(hwy))
mpg %>%
filter(cyl %in% c('2','4','6','8')) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy))
mpg %>%
filter(cyl %in% c('2','4','6','8')) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg))
mpg %>%
mutate(avg_spd = (cty + hwy) / 2) %>%
group_by(class) %>%
summarise(class별평균속도 = mean(avg_spd)) %>%
arrange(desc(class별평균속도)) %>%
head(5)
mpg %>%
mutate(avg_spd = (cty + hwy) / 2) %>%
select(manufacturer, class, cty, hwy, avg_spd) %>%
head(5)
mtcars
head(5)
mtcars %>%
mutate(mpg_per_disp = (mpg /disp)) %>%
arrange(desc(mpg_per_disp)) %>%
head(5)
mtcars %>%
group_by(syl) %>%
summarise(평균마력 = mean(avg_hp)) %>%
arrange(desc(평균마력)) %>%
head(5)
mtcars %>%
group_by(cyl) %>%
summarise(평균마력 = mean(avg_hp)) %>%
arrange(desc(평균마력)) %>%
head(5)
mtcars %>%
group_by(cyl) %>%
summarise(평균마력 = mean(hp)) %>%
arrange(desc(평균마력)) %>%
head(5)
mtcars %>%
group_by(cyl) %>%
summarise(avg_mpg_hp = mean((mpg+hp)/2)) %>%
arrange(desc(avg_mpg_hp))
mtcars %>%
group_by(cyl) %>%
summarise each(funs(mean, n()), disp, hp))
mtcars %>%
group_by(cyl) %>%
summarise_each(funs(mean, n()), disp, hp))
mtcars %>%
group_by(cyl) %>%
summarise_each(funs(mean, n()), disp, hp)
iris
iris %>%
group_by(species) %>%
summarise_each(funs(mean, n()), sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris %>%
group_by(Species) %>%
summarise_each(funs(mean, n()), sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris %>%
group_by(Species) %>%
summarise_each(funs(mean, n()), Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris %>%
group_by(Species) %>%
summarise_each(list(mean),Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)
install.packages("sqldf")
library(sqldf)
library(googleVis)
Fruits
sqldf('select * From fruits')
Fruits
sqldf('select * From fruits')
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
library(googleVis)
Fruits
sqldf('select * From fruits')
sqldf("select * from fruits where fruit='apples'")
#sqldf() 패키지 활용
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
library(googleVis)
Fruits
#sqldf() 패키지 활용
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
#sqldf() 패키지 활용
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
library(googleVis)
Fruits
sqldf('select * From fruits')
sqldf("select * from fruits where fruit='apples'")
sqldf('select * from fruits where fruit=\'apples\'')
sqldf('select * from fruits limit 3, 5')
sqldf('SELECT * FROM Fruits')
sqldf("SELECT * FROM Fruits WHERE Fruit='Apples'")
sqldf('SELECT * FROM Fruits WHERE Fruit=\'Apples\'')
sqldf('SELECT * FROM Fruits LIMIT 3, 5')
sqldf('SELECT * FROM Fruits ORDER BY Year')
sqldf('SELECT * FROM Fruits ORDER BY Year DESC')
SQLDF('SELECT Fruit, sum(Sales) FROM Fruits group by Fruit')
sqldf('SELECT Fruit, sum(Sales) FROM Fruits group by Fruit')
sqldf('SELECT Fruit, sum(Sales), sum(Expenses), sum(Profit) FROM Fruits group by Fruit')
sqldf('SELECT Fruit, avg(Sales), avg(Expenses), avg(Profit) FROM Fruits group by Fruit')
sqldf('SELECT Fruit, avg(Sales), avg(Expenses), avg(Profit) FROM Fruits group by Year')
sqldf('SELECT Year, avg(Sales), avg(Expenses), avg(Profit) FROM Fruits group by Year')
sqldf('SELECT Year, avg(Sales), avg(Expenses), avg(Profit) FROM Fruits group by Year DESC')
sqldf('SELECT Year, avg(Sales), avg(Expenses), avg(Profit) FROM Fruits group by Year ORDER BY DESC')
sqldf('SELECT Year, avg(Sales), avg(Expenses), avg(Profit) FROM Fruits group by Year ORDER BY avg(Profit) DESC')
sqldf('SELECT Fruit, max(Sales), min(Sales) FROM Fruits group by Fruit')
sqldf('SELECT Fruit, max(Sales), min(Sales) FROM Fruit')
sqldf('SELECT Fruit, max(Sales), min(Sales) FROM Fruits')
sqldf('SELECT max(Sales), min(Sales) FROM Fruits')
sqldf('SELECT min(Sales), max(Sales) FROM Fruits')
sqldf('SELECT * FROM Fruits where Sales-81')
sqldf('SELECT * FROM Fruits where Sales=81')
sqldf('SELECT * FROM Fruits where Sales=(SELECT min(Sales) FROM Fruits)')
sqldf('SELECT * FROM Fruits where Sales=(SELECT max(Expenses) FROM Fruits)')
sqldf('SELECT * FROM Fruits where Expenses=(SELECT max(Expenses) FROM Fruits)')
song <- read.csv("song.csv")
song
song <- read.csv("song.csv", header = F, fileEncoding = 'utf-8')
song
song
names(song) <- c('_id','title','lyrics','girl_group_id')
names(song) <- c('_id', 'title', 'lyrics', 'girl_group_id')
names(song) <- c('_id', 'title', 'lyrics',)
names(song) <- c('_id', 'title', 'lyrics')
song
girl_group <- read.csv("girl_group.csv", header = F, fileEncoding = 'utf8')
girl_group
names(girl_group) <- c('_id', 'name', 'debut')
girl_group
sqldf("SELECT gg._id, gg.name AS '걸그룹 이름', gg.debut AS '데뷔',
s.title AS '제목'FROM girl_group AS gg
INNER JOIN song AS S
ON gg._id = s.girl_group_id")
sqldf("SELECT gg._id, gg.name, gg.debut, s.title
FROM girl_group AS gg
INNER JOIN song AS S
ON gg._id = s.girl_group_id")
sqldf("SELECT gg._id, gg.name, gg.debut, s.title
FROM girl_group AS gg
INNER JOIN song AS s
ON gg._id = s.girl_group_id")
sqldf(c('UPDATE Fruits SET Profit=50 WHERE Fruit=\'Apples\' AND Year=2008', 'SELECT * FROM Fruits'))
install.packages(sqldf)
sqldf(c('UPDATE Fruits SET Profit=50 WHERE Fruit=\'Apples\' AND Year=2008', 'SELECT * FROM Fruits'))
sqldf(c('UPDATE Fruits SET Profit=50 WHERE Fruit=\'Apples\' AND Year=2008', 'SELECT * FROM Fruits'))
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
library(googleVis""
library(googleVis")
sqldf(c('UPDATE Fruits SET Profit=50 WHERE Fruit=\'Apples\' AND Year=2008', 'SELECT * FROM Fruits'))
Fruits
library(sqldf)
library(googleVis)
Fruits
sqldf(c('UPDATE Fruits SET Profit=50 WHERE Fruit=\'Apples\' AND Year=2008', 'SELECT * FROM Fruits'))
for (i in 1:10) {
print(1)
}
for (i in 1:10) {
print(i)
}
sum <- 0
for (i in 1:100) {
sum <- sum + i
}
print(sum)
sum <- 0
for (i in 3:100:3) {
sum <- sum + i
}
print(sum)
sum <- 0
for (i in 1:100) {
if (i %% 3 == 0)
sum <- sum + i
}
print(sum)
multiple <- function(Limit, number) {
sum <- 0
for (i in 1:Limit) {
if (i %% number == 0)
sum <- sum + i
}
return(sum)
}
multiple(1000, 4)
# 연습문제
read.txt("채소.txt")
library(stringr)
for (i in 1:5) {
line <- ''
for(k in 1:i) {
line <- str_c(line, '#')
}
print(line)
}
library(stringr)
for (i in 5:1) {
line <- ''
for(k in 1:i) {
line <- str_c(line, '#')
}
print(line)
}
char <- c('apple','Apple','APPLE','banana','grape')
grep('apple',char)
char2 <- c('apple','banana')
grep(char2,char)
grep(paste(char2,collapse='I'),char1,value=T)
grep(paste(char2,collapse='|'),char1,value=T)
grep(paste(char2,collapse='|'),cha1,value=T)
grep(paste(char2,collapse='|'),char,value=T)
grep('pp',char)
grep('pp',char, value =T)
grep('^A',char, value=T)
grep('e$',char,value=T)
char2 <- c('graple1','apple1','apple','orange','Apple')
grep('ap',char2,value=T)
grep('[[:upper:]]',char2,value=t)
GREP('[1-9]',char2,value=T)
GREP('[1-9]', char2, value=T)
grep('[1-9]',char2,value=T)
grep('[[:upper:]]',char2,value=T)
grep('[A-Z]',char2,value=T)
char
nchar(char)
nchar('James Seo')
nchar('서진수')
paste('Seo','Jin','Su')
paste('Seo','Jin','Su',sep='')
paste('Seo','Jin','Su',sep='/')
paste('|','\'m','Hungry')
paste('I','\'m','Hungry')
substar('abc123',3,3)
substr('abc123',3,3)
substr('abc123',3,4)
strsplit('2014/11/22',split='/')
grep('-','010-8706-4712')
regexpr('-','010-8706-4712')
attr(,"match.length")
attr(,"match.length")
attr(, "match.length")
